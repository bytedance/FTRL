{"book_reservation": "from typing import Any, Dict, List\n\n\ndef book_reservation(\n    data: Dict[str, Any],\n    user_id: str,\n    origin: str,\n    destination: str,\n    flight_type: str,\n    cabin: str,\n    flights: List[Dict[str, Any]],\n    passengers: List[Dict[str, Any]],\n    payment_methods: List[Dict[str, Any]],\n    total_baggages: int,\n    nonfree_baggages: int,\n    insurance: str,\n) -> str:\n    import json\n    from copy import deepcopy\n    reservations, users = data[\"reservations\"], data[\"users\"]\n    if user_id not in users:\n        return \"Error: user not found\"\n    user = users[user_id]\n\n    # assume each task makes at most 3 reservations\n    reservation_id = \"HATHAT\"\n    if reservation_id in reservations:\n        reservation_id = \"HATHAU\"\n        if reservation_id in reservations:\n            reservation_id = \"HATHAV\"\n\n    reservation = {\n        \"reservation_id\": reservation_id,\n        \"user_id\": user_id,\n        \"origin\": origin,\n        \"destination\": destination,\n        \"flight_type\": flight_type,\n        \"cabin\": cabin,\n        \"flights\": deepcopy(flights),\n        \"passengers\": passengers,\n        \"payment_history\": payment_methods,\n        \"created_at\": \"2024-05-15T15:00:00\",\n        \"total_baggages\": total_baggages,\n        \"nonfree_baggages\": nonfree_baggages,\n        \"insurance\": insurance,\n    }\n\n    # update flights and calculate price\n    total_price = 0\n    for flight in reservation[\"flights\"]:\n        flight_number = flight[\"flight_number\"]\n        if flight_number not in data[\"flights\"]:\n            return f\"Error: flight {flight_number} not found\"\n        flight_data = data[\"flights\"][flight_number]\n        if flight[\"date\"] not in flight_data[\"dates\"]:\n            return (\n                f\"Error: flight {flight_number} not found on date {flight['date']}\"\n            )\n        flight_date_data = flight_data[\"dates\"][flight[\"date\"]]\n        if flight_date_data[\"status\"] != \"available\":\n            return f\"Error: flight {flight_number} not available on date {flight['date']}\"\n        if flight_date_data[\"available_seats\"][cabin] < len(passengers):\n            return f\"Error: not enough seats on flight {flight_number}\"\n        flight[\"price\"] = flight_date_data[\"prices\"][cabin]\n        flight[\"origin\"] = flight_data[\"origin\"]\n        flight[\"destination\"] = flight_data[\"destination\"]\n        total_price += flight[\"price\"] * len(passengers)\n\n    if insurance == \"yes\":\n        total_price += 30 * len(passengers)\n\n    total_price += 50 * nonfree_baggages\n\n    for payment_method in payment_methods:\n        payment_id = payment_method[\"payment_id\"]\n        amount = payment_method[\"amount\"]\n        if payment_id not in user[\"payment_methods\"]:\n            return f\"Error: payment method {payment_id} not found\"\n        if user[\"payment_methods\"][payment_id][\"source\"] in [\n            \"gift_card\",\n            \"certificate\",\n        ]:\n            if user[\"payment_methods\"][payment_id][\"amount\"] < amount:\n                return f\"Error: not enough balance in payment method {payment_id}\"\n    if sum(payment[\"amount\"] for payment in payment_methods) != total_price:\n        return f\"Error: payment amount does not add up, total price is {total_price}, but paid {sum(payment['amount'] for payment in payment_methods)}\"\n\n    # if checks pass, deduct payment and update seats\n    for payment_method in payment_methods:\n        payment_id = payment_method[\"payment_id\"]\n        amount = payment_method[\"amount\"]\n        if user[\"payment_methods\"][payment_id][\"source\"] == \"gift_card\":\n            user[\"payment_methods\"][payment_id][\"amount\"] -= amount\n        elif user[\"payment_methods\"][payment_id][\"source\"] == \"certificate\":\n            del user[\"payment_methods\"][payment_id]\n\n    reservations[reservation_id] = reservation\n    user[\"reservations\"].append(reservation_id)\n    return json.dumps(reservation)", "calculate": "from typing import Any, Dict, List\n\n\ndef calculate(data: Dict[str, Any], expression: str) -> str:\n    import json\n    from copy import deepcopy\n    if not all(char in \"0123456789+-*/(). \" for char in expression):\n        return \"Error: invalid characters in expression\"\n    try:\n        return str(round(float(eval(expression, {\"__builtins__\": None}, {})), 2))\n    except Exception as e:\n        return f\"Error: {e}\"", "cancel_reservation": "from typing import Any, Dict, List\n\n\ndef cancel_reservation(\n    data: Dict[str, Any],\n    reservation_id: str,\n) -> str:\n    import json\n    from copy import deepcopy\n    reservations = data[\"reservations\"]\n    if reservation_id not in reservations:\n        return \"Error: reservation not found\"\n    reservation = reservations[reservation_id]\n\n    # reverse the payment\n    refunds = []\n    for payment in reservation[\"payment_history\"]:\n        refunds.append(\n            {\n                \"payment_id\": payment[\"payment_id\"],\n                \"amount\": -payment[\"amount\"],\n            }\n        )\n    reservation[\"payment_history\"].extend(refunds)\n    reservation[\"status\"] = \"cancelled\"\n    return json.dumps(reservation)", "get_reservation_details": "from typing import Any, Dict, List\n\n\ndef get_reservation_details(data: Dict[str, Any], reservation_id: str) -> str:\n    import json\n    from copy import deepcopy\n    reservations = data[\"reservations\"]\n    if reservation_id in reservations:\n        return json.dumps(reservations[reservation_id])\n    return \"Error: user not found\"", "get_user_details": "from typing import Any, Dict, List\n\n\ndef get_user_details(data: Dict[str, Any], user_id: str) -> str:\n    import json\n    from copy import deepcopy\n    users = data[\"users\"]\n    if user_id in users:\n        return json.dumps(users[user_id])\n    return \"Error: user not found\"", "list_all_airports": "from typing import Any, Dict, List\n\n\ndef list_all_airports(data: Dict[str, Any]) -> str:\n    import json\n    from copy import deepcopy\n    airports = [\n        \"SFO\",\n        \"JFK\",\n        \"LAX\",\n        \"ORD\",\n        \"DFW\",\n        \"DEN\",\n        \"SEA\",\n        \"ATL\",\n        \"MIA\",\n        \"BOS\",\n        \"PHX\",\n        \"IAH\",\n        \"LAS\",\n        \"MCO\",\n        \"EWR\",\n        \"CLT\",\n        \"MSP\",\n        \"DTW\",\n        \"PHL\",\n        \"LGA\",\n    ]\n    cities = [\n        \"San Francisco\",\n        \"New York\",\n        \"Los Angeles\",\n        \"Chicago\",\n        \"Dallas\",\n        \"Denver\",\n        \"Seattle\",\n        \"Atlanta\",\n        \"Miami\",\n        \"Boston\",\n        \"Phoenix\",\n        \"Houston\",\n        \"Las Vegas\",\n        \"Orlando\",\n        \"Newark\",\n        \"Charlotte\",\n        \"Minneapolis\",\n        \"Detroit\",\n        \"Philadelphia\",\n        \"LaGuardia\",\n    ]\n    return json.dumps({airport: city for airport, city in zip(airports, cities)})", "search_direct_flight": "from typing import Any, Dict, List\n\n\ndef search_direct_flight(data: Dict[str, Any], origin: str, destination: str, date: str) -> str:\n    import json\n    from copy import deepcopy\n    flights = data[\"flights\"]\n    results = []\n    for flight in flights.values():\n        if flight[\"origin\"] == origin and flight[\"destination\"] == destination:\n            if (\n                date in flight[\"dates\"]\n                and flight[\"dates\"][date][\"status\"] == \"available\"\n            ):\n                # results add flight except dates, but add flight[\"datas\"][date]\n                results.append({k: v for k, v in flight.items() if k != \"dates\"})\n                results[-1].update(flight[\"dates\"][date])\n    return json.dumps(results)", "search_onestop_flight": "from typing import Any, Dict, List\n\n\ndef search_onestop_flight(data: Dict[str, Any], origin: str, destination: str, date: str) -> str:\n    import json\n    from copy import deepcopy\n    flights = data[\"flights\"]\n    results = []\n    for flight1 in flights.values():\n        if flight1[\"origin\"] == origin:\n            for flight2 in flights.values():\n                if (\n                    flight2[\"destination\"] == destination\n                    and flight1[\"destination\"] == flight2[\"origin\"]\n                ):\n                    date2 = (\n                        f\"2024-05-{int(date[-2:])+1}\"\n                        if \"+1\" in flight1[\"scheduled_arrival_time_est\"]\n                        else date\n                    )\n                    if (\n                        flight1[\"scheduled_arrival_time_est\"]\n                        > flight2[\"scheduled_departure_time_est\"]\n                    ):\n                        continue\n                    if date in flight1[\"dates\"] and date2 in flight2[\"dates\"]:\n                        if (\n                            flight1[\"dates\"][date][\"status\"] == \"available\"\n                            and flight2[\"dates\"][date2][\"status\"] == \"available\"\n                        ):\n                            result1 = {\n                                k: v for k, v in flight1.items() if k != \"dates\"\n                            }\n                            result1.update(flight1[\"dates\"][date])\n                            result1[\"date\"] = date\n                            result2 = {\n                                k: v for k, v in flight2.items() if k != \"dates\"\n                            }\n                            result2.update(flight2[\"dates\"][date])\n                            result2[\"date\"] = date2\n                            results.append([result1, result2])\n    return json.dumps(results)", "send_certificate": "from typing import Any, Dict, List\n\n\ndef send_certificate(\n    data: Dict[str, Any],\n    user_id: str,\n    amount: int,\n) -> str:\n    import json\n    from copy import deepcopy\n    users = data[\"users\"]\n    if user_id not in users:\n        return \"Error: user not found\"\n    user = users[user_id]\n\n    # add a certificate, assume at most 3 cases per task\n    for id in [3221322, 3221323, 3221324]:\n        payment_id = f\"certificate_{id}\"\n        if payment_id not in user[\"payment_methods\"]:\n            user[\"payment_methods\"][payment_id] = {\n                \"source\": \"certificate\",\n                \"amount\": amount,\n                \"id\": payment_id,\n            }\n            return f\"Certificate {payment_id} added to user {user_id} with amount {amount}.\"", "think": "from typing import Any, Dict, List\n\n\ndef think(data: Dict[str, Any], thought: str) -> str:\n    import json\n    from copy import deepcopy\n    return \"\"", "transfer_to_human_agents": "from typing import Any, Dict, List\n\n\ndef transfer_to_human_agents(\n    data: Dict[str, Any],\n    summary: str,\n) -> str:\n    import json\n    from copy import deepcopy\n    return \"Transfer successful\"", "update_reservation_baggages": "from typing import Any, Dict, List\n\n\ndef update_reservation_baggages(\n    data: Dict[str, Any],\n    reservation_id: str,\n    total_baggages: int,\n    nonfree_baggages: int,\n    payment_id: str,\n) -> str:\n    import json\n    from copy import deepcopy\n    users, reservations = data[\"users\"], data[\"reservations\"]\n    if reservation_id not in reservations:\n        return \"Error: reservation not found\"\n    reservation = reservations[reservation_id]\n\n    total_price = 50 * max(0, nonfree_baggages - reservation[\"nonfree_baggages\"])\n    if payment_id not in users[reservation[\"user_id\"]][\"payment_methods\"]:\n        return \"Error: payment method not found\"\n    payment_method = users[reservation[\"user_id\"]][\"payment_methods\"][payment_id]\n    if payment_method[\"source\"] == \"certificate\":\n        return \"Error: certificate cannot be used to update reservation\"\n    elif (\n        payment_method[\"source\"] == \"gift_card\"\n        and payment_method[\"amount\"] < total_price\n    ):\n        return \"Error: gift card balance is not enough\"\n\n    reservation[\"total_baggages\"] = total_baggages\n    reservation[\"nonfree_baggages\"] = nonfree_baggages\n    if payment_method[\"source\"] == \"gift_card\":\n        payment_method[\"amount\"] -= total_price\n\n    if total_price != 0:\n        reservation[\"payment_history\"].append(\n            {\n                \"payment_id\": payment_id,\n                \"amount\": total_price,\n            }\n        )\n\n    return json.dumps(reservation)", "update_reservation_flights": "from typing import Any, Dict, List\n\n\ndef update_reservation_flights(\n    data: Dict[str, Any],\n    reservation_id: str,\n    cabin: str,\n    flights: List[Dict[str, Any]],\n    payment_id: str,\n) -> str:\n    import json\n    from copy import deepcopy\n    users, reservations = data[\"users\"], data[\"reservations\"]\n    if reservation_id not in reservations:\n        return \"Error: reservation not found\"\n    reservation = reservations[reservation_id]\n\n    # update flights and calculate price\n    total_price = 0\n    flights = deepcopy(flights)\n    for flight in flights:\n        # if existing flight, ignore\n        if _ := [\n            f\n            for f in reservation[\"flights\"]\n            if f[\"flight_number\"] == flight[\"flight_number\"]\n            and f[\"date\"] == flight[\"date\"]\n            and cabin == reservation[\"cabin\"]\n        ]:\n            total_price += _[0][\"price\"] * len(reservation[\"passengers\"])\n            flight[\"price\"] = _[0][\"price\"]\n            flight[\"origin\"] = _[0][\"origin\"]\n            flight[\"destination\"] = _[0][\"destination\"]\n            continue\n        flight_number = flight[\"flight_number\"]\n        if flight_number not in data[\"flights\"]:\n            return f\"Error: flight {flight_number} not found\"\n        flight_data = data[\"flights\"][flight_number]\n        if flight[\"date\"] not in flight_data[\"dates\"]:\n            return (\n                f\"Error: flight {flight_number} not found on date {flight['date']}\"\n            )\n        flight_date_data = flight_data[\"dates\"][flight[\"date\"]]\n        if flight_date_data[\"status\"] != \"available\":\n            return f\"Error: flight {flight_number} not available on date {flight['date']}\"\n        if flight_date_data[\"available_seats\"][cabin] < len(\n            reservation[\"passengers\"]\n        ):\n            return f\"Error: not enough seats on flight {flight_number}\"\n        flight[\"price\"] = flight_date_data[\"prices\"][cabin]\n        flight[\"origin\"] = flight_data[\"origin\"]\n        flight[\"destination\"] = flight_data[\"destination\"]\n        total_price += flight[\"price\"] * len(reservation[\"passengers\"])\n\n    total_price -= sum(flight[\"price\"] for flight in reservation[\"flights\"]) * len(\n        reservation[\"passengers\"]\n    )\n\n    # check payment\n    if payment_id not in users[reservation[\"user_id\"]][\"payment_methods\"]:\n        return \"Error: payment method not found\"\n    payment_method = users[reservation[\"user_id\"]][\"payment_methods\"][payment_id]\n    if payment_method[\"source\"] == \"certificate\":\n        return \"Error: certificate cannot be used to update reservation\"\n    elif (\n        payment_method[\"source\"] == \"gift_card\"\n        and payment_method[\"amount\"] < total_price\n    ):\n        return \"Error: gift card balance is not enough\"\n\n    # if checks pass, deduct payment and update seats\n    if payment_method[\"source\"] == \"gift_card\":\n        payment_method[\"amount\"] -= total_price\n    reservation[\"flights\"] = flights\n    if total_price != 0:\n        reservation[\"payment_history\"].append(\n            {\n                \"payment_id\": payment_id,\n                \"amount\": total_price,\n            }\n        )\n    # do not make flight database update here, assume it takes time to be updated\n    return json.dumps(reservation)", "update_reservation_passengers": "from typing import Any, Dict, List\n\n\ndef update_reservation_passengers(\n    data: Dict[str, Any],\n    reservation_id: str,\n    passengers: List[Dict[str, Any]],\n) -> str:\n    import json\n    from copy import deepcopy\n    reservations = data[\"reservations\"]\n    if reservation_id not in reservations:\n        return \"Error: reservation not found\"\n    reservation = reservations[reservation_id]\n    if len(passengers) != len(reservation[\"passengers\"]):\n        return \"Error: number of passengers does not match\"\n    reservation[\"passengers\"] = passengers\n    return json.dumps(reservation)"}